// Provides pseudo random, dummy, new/modify/cancel orders generation functionality
// and submits orders to OrderManagement instance it receives in constructor.
// Multiple instances of this class can be instantiated with the same OrderManagement
// class instance, to simulate multithreaded orders submission to OrderManagement.
// This MockOrdersGenerator class is an attempt to simulate multithreaded flow for testing
// (every MockOrdersGenerator instance submits orders to OrderManagement in a separate thread).
// Every instance of this class generates sequential orders but also prepends unique digit
// (clientPrefix digit it receives in its constructor), so that we can easily distinguish
// between orders from different generators (OrderIds of MockOrdersGenerator1 will start with 1,
// OrderIds generated by MockOrdersGenerator2 will start with digit 2 etc.).

#ifndef MOCK_ORDERS_GENERATOR_H
#define MOCK_ORDERS_GENERATOR_H

#include <thread>
#include <vector>
#include <functional>

#include "Utils.h"

namespace ordermanagement {

class OrderManagement;

class MockOrdersGenerator {
public:
    MockOrdersGenerator(OrderManagement* orderManager, uint8_t clientPrefix);
    ~MockOrdersGenerator();

private:    
    void generateOrders();
    uint64_t getNextSeqNumber();

private:
    OrderManagement* m_orderManager;
    uint8_t  m_clientPrefix;
    uint8_t  m_terminate;
    uint64_t m_orderSeqNum;
    std::unique_ptr<std::thread> m_generatorThread;
};

} // ordermanagement namespace

#endif